{"version":3,"sources":["../../app/controllers/UserController.js"],"names":["UserController","req","res","password","hashSync","body","user","email","save","err","newUser","status","send","message","token","createToken","findOne","compareSync","userController"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;;;IAEMA,c;;;;;;;;;AAEJ;2BACQC,G,EAAKC,G,EAAK;AAChB,UAAMC,WAAW,iBAAOC,QAAP,CAAgBH,IAAII,IAAJ,CAASF,QAAzB,EAAmC,EAAnC,CAAjB;AACA,UAAMG,OAAO,yBAAc;AACzBC,eAAON,IAAII,IAAJ,CAASE,KADS;AAEzBJ,kBAAUA;AAFe,OAAd,CAAb;;AAKAG,WAAKE,IAAL,CAAU,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC1B,YAAID,GAAJ,EAAS,OAAOP,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,2BAAV,EAArB,CAAP;;AAET,eAAOX,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACE,OAAO,mBAASC,WAAT,CAAqBL,OAArB,CAAR,EAArB,CAAP;AACD,OAJD;AAKD;;;2BAEOT,G,EAAKC,G,EAAK;AAChB,2BAAUc,OAAV,CAAkB,EAACT,OAAON,IAAII,IAAJ,CAASE,KAAjB,EAAlB,EAA2C,UAACE,GAAD,EAAMH,IAAN,EAAe;AACxD,YAAIG,GAAJ,EAAS,OAAOP,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAASJ,GAAV,EAArB,CAAP;AACT,YAAI,CAACH,IAAL,EAAW,OAAOJ,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,uBAAV,EAArB,CAAP;;AAEX,YAAI,CAAC,iBAAOI,WAAP,CAAmBhB,IAAII,IAAJ,CAASF,QAA5B,EAAsCG,KAAKH,QAA3C,CAAL,EAA2D;AACzD,iBAAOD,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,sBAAV,EAArB,CAAP;AACD;;AAED,eAAOX,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACE,OAAO,mBAASC,WAAT,CAAqBT,IAArB,CAAR,EAAoCC,OAAOD,KAAKC,KAAhD,EAArB,CAAP;AAED,OAVD;AAWD;;;;;;AAII,IAAMW,0CAAiB,IAAIlB,cAAJ,EAAvB","file":"UserController.js","sourcesContent":["import {userModel} from '../models/userModel'\nimport bcrypt from 'bcrypt'\nimport services from '../services'\n\nclass UserController {\n\n  //Funcion para registar un Usuario\n  signUp (req, res) {\n    const password = bcrypt.hashSync(req.body.password, 10)\n    const user = new userModel({\n      email: req.body.email,\n      password: password\n    })\n\n    user.save((err, newUser) => {\n      if (err) return res.status(500).send({message: 'Error al crear el usuario'})\n\n      return res.status(200).send({token: services.createToken(newUser)})\n    })\n  }\n\n  signIn (req, res) {\n    userModel.findOne({email: req.body.email}, (err, user) => {\n      if (err) return res.status(500).send({message: err})\n      if (!user) return res.status(404).send({message: 'Usuario no registrado'})\n\n      if (!bcrypt.compareSync(req.body.password, user.password)) {\n        return res.status(401).send({message: 'la clave es invalida'})\n      }\n\n      return res.status(200).send({token: services.createToken(user), email: user.email})\n      \n    })\n  }\n\n}\n\nexport const userController = new UserController()\n"]}