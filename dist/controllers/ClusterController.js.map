{"version":3,"sources":["../../app/controllers/ClusterController.js"],"names":["ClusterController","req","res","find","exec","err","clusters","status","send","message","cluster","body","save","newCluster","clusterId","params","id","clusterUpdate","findByIdAndUpdate","findByIdAndRemove","_id","clusterController"],"mappings":";;;;;;;;;AAAA;;;;IAEMA,iB;;;;;;;2BAEIC,G,EAAKC,G,EAAK;AAChB,iCAAaC,IAAb,CAAkB,EAAlB,EAAsBC,IAAtB,CAA2B,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAC5C,YAAID,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,6BAAV,EAArB,CAAP;AACT,eAAOP,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB,CAAP;AACD,OAHD;AAID;;;yBAEKL,G,EAAKC,G,EAAK;AACd,UAAIQ,UAAU,+BAAiBT,IAAIU,IAArB,CAAd;;AAEAD,cAAQE,IAAR,CAAa,UAACP,GAAD,EAAMQ,UAAN,EAAqB;AAChC,YAAIR,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,6BAAV,EAArB,CAAP;AACT,eAAOP,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBK,UAArB,CAAP;AACD,OAHD;AAID;;;2BAEOZ,G,EAAKC,G,EAAK;AAChB,UAAMY,YAAYb,IAAIc,MAAJ,CAAWC,EAA7B;AACA,UAAMC,gBAAgBhB,IAAIU,IAA1B;;AAEA,iCAAaO,iBAAb,CAA+BJ,SAA/B,EAA0CG,aAA1C,EAAyD,UAACZ,GAAD,EAAMK,OAAN,EAAkB;AACzE,YAAIL,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,4BAAV,EAArB,CAAP;AACT,YAAG,CAACC,OAAJ,EAAa,OAAOR,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,iCAAV,EAArB,CAAP;AACbP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACE,SAASA,OAAV,EAArB;AACD,OAJD;AAKD;;;2BAEOT,G,EAAKC,G,EAAK;AAChB,UAAMY,YAAYb,IAAIc,MAAJ,CAAWC,EAA7B;;AAEA,iCAAaG,iBAAb,CAA+BL,SAA/B,EAA0C,UAACT,GAAD,EAAMK,OAAN,EAAkB;AAC1D,YAAIL,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,8BAAV,EAArB,CAAP;AACT,YAAG,CAACC,OAAJ,EAAa,OAAOR,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,mCAAV,EAArB,CAAP;AACbP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,mBAAV,EAA+BO,IAAIN,QAAQU,GAA3C,EAArB;AACD,OAJD;AAKD;;;;;;AAGI,IAAMC,gDAAoB,IAAIrB,iBAAJ,EAA1B","file":"ClusterController.js","sourcesContent":["import {clusterModel} from '../models/clusterModel'\n\nclass ClusterController {\n  \n  getAll (req, res) {\n    clusterModel.find({}).exec((err, clusters) => {\n      if (err) return res.status(500).send({message: 'Error al buscar los cluster'})\n      return res.status(200).send(clusters)\n    })\n  }\n\n  save (req, res) {\n    let cluster = new clusterModel(req.body)\n\n    cluster.save((err, newCluster) => {\n      if (err) return res.status(500).send({message: 'Error al guardar el cluster'})\n      return res.status(200).send(newCluster)\n    })\n  }\n\n  update (req, res) {\n    const clusterId = req.params.id\n    const clusterUpdate = req.body\n  \n    clusterModel.findByIdAndUpdate(clusterId, clusterUpdate, (err, cluster) => {\n      if (err) return res.status(500).send({message: 'error al editar el cluster'})\n      if(!cluster) return res.status(404).send({message: 'cluster no encontrado al editar'})\n      res.status(200).send({cluster: cluster})\n    })\n  }\n\n  remove (req, res) {\n    const clusterId = req.params.id\n\n    clusterModel.findByIdAndRemove(clusterId, (err, cluster) => {\n      if (err) return res.status(500).send({message: 'error al eliminar el cluster'})\n      if(!cluster) return res.status(404).send({message: 'cluster no encontrado al eliminar'})\n      res.status(200).send({message: 'cluster eliminado', id: cluster._id})\n    })\n  }\n}\n\nexport const clusterController = new ClusterController()"]}