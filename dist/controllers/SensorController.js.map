{"version":3,"sources":["../../app/controllers/SensorController.js"],"names":["SensorController","req","res","find","exec","err","sensores","status","send","message","sensorId","params","id","findById","sensor","body","save","newSensor","sensorUpdate","findByIdAndUpdate","findByIdAndRemove","_id","sensorController"],"mappings":";;;;;;;;;AAAA;;;;IAEMA,gB;;;;;;;;;AAEJ;2BACQC,G,EAAKC,G,EAAK;AAChB,+BAAYC,IAAZ,CAAiB,EAAjB,EAAqBC,IAArB,CAA0B,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAC3C,YAAID,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,8BAAV,EAArB,CAAP;AACTP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,QAArB;AACD,OAHD;AAID;;AAED;;;;4BACSL,G,EAAKC,G,EAAK;AACjB,UAAMQ,WAAWT,IAAIU,MAAJ,CAAWC,EAA5B;;AAEA,+BAAYC,QAAZ,CAAqBH,QAArB,EAA+B,UAACL,GAAD,EAAMS,MAAN,EAAiB;AAC9C,YAAIT,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,2BAAV,EAArB,CAAP;AACT,YAAI,CAACK,MAAL,EAAa,OAAOZ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,qBAAV,EAArB,CAAP;AACbP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBM,MAArB;AACD,OAJD;AAKD;;AAED;;;;yBACMb,G,EAAKC,G,EAAK;AACd,UAAIY,SAAS,6BAAgBb,IAAIc,IAApB,CAAb;;AAEAD,aAAOE,IAAP,CAAY,UAACX,GAAD,EAAMY,SAAN,EAAoB;AAC9B,YAAIZ,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,4BAAV,EAArB,CAAP;AACTP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBS,SAArB;AACD,OAHD;AAID;;AAED;;;;2BACQhB,G,EAAKC,G,EAAK;AAChB,UAAMQ,WAAWT,IAAIU,MAAJ,CAAWC,EAA5B;AACA,UAAMM,eAAejB,IAAIc,IAAzB;;AAEA,+BAAYI,iBAAZ,CAA8BT,QAA9B,EAAwCQ,YAAxC,EAAsD,UAACb,GAAD,EAAMS,MAAN,EAAiB;AACrE,YAAIT,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,2BAAV,EAArB,CAAP;AACT,YAAG,CAACK,MAAJ,EAAY,OAAOZ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,gCAAV,EAArB,CAAP;AACZP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACM,QAAQA,MAAT,EAArB;AACD,OAJD;AAKD;;AAED;;;;2BACQb,G,EAAKC,G,EAAK;AAChB,UAAMQ,WAAWT,IAAIU,MAAJ,CAAWC,EAA5B;;AAEA,+BAAYQ,iBAAZ,CAA8BV,QAA9B,EAAwC,UAACL,GAAD,EAAMS,MAAN,EAAiB;AACvD,YAAIT,GAAJ,EAAS,OAAOH,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,6BAAV,EAArB,CAAP;AACT,YAAG,CAACK,MAAJ,EAAY,OAAOZ,IAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,kCAAV,EAArB,CAAP;AACZP,YAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,kBAAV,EAA8BG,IAAIE,OAAOO,GAAzC,EAArB;AACD,OAJD;AAKD;;;;;;AAGI,IAAMC,8CAAmB,IAAItB,gBAAJ,EAAzB","file":"SensorController.js","sourcesContent":["import {sensorModel} from '../models/sensorModel'\n\nclass SensorController {\n\n  //Funcion para obtener todos los Sensores\n  getAll (req, res) {\n    sensorModel.find({}).exec((err, sensores) => {\n      if (err) return res.status(500).send({message: 'error al buscar los sensores'})\n      res.status(200).send(sensores)\n    })\n  }\n\n  //Funcion para obtener un registro por ID\n  getById (req, res) {\n    const sensorId = req.params.id\n\n    sensorModel.findById(sensorId, (err, sensor) => {\n      if (err) return res.status(500).send({message: 'error al buscar el sensor'})\n      if (!sensor) return res.status(404).send({message: 'el sensor no existe'})\n      res.status(200).send(sensor)\n    })\n  }\n\n  //Funcion para guardar un sensor\n  save (req, res) {\n    let sensor = new sensorModel(req.body)\n\n    sensor.save((err, newSensor) => {\n      if (err) return res.status(500).send({message: 'Error al guardar el sensor'})\n      res.status(200).send(newSensor)\n    })\n  }\n\n  //Funcion para editar un sensor\n  update (req, res) {\n    const sensorId = req.params.id\n    const sensorUpdate = req.body\n  \n    sensorModel.findByIdAndUpdate(sensorId, sensorUpdate, (err, sensor) => {\n      if (err) return res.status(500).send({message: 'error al editar el sensor'})\n      if(!sensor) return res.status(404).send({message: 'sensor no encontrado al editar'})\n      res.status(200).send({sensor: sensor})\n    })\n  }\n\n  //Funcion para eliminar un sensor\n  remove (req, res) {\n    const sensorId = req.params.id\n\n    sensorModel.findByIdAndRemove(sensorId, (err, sensor) => {\n      if (err) return res.status(500).send({message: 'error al eliminar el sensor'})\n      if(!sensor) return res.status(404).send({message: 'sensor no encontrado al eliminar'})\n      res.status(200).send({message: 'sensor eliminado', id: sensor._id})\n    })\n  }\n}\n\nexport const sensorController = new SensorController()\n"]}